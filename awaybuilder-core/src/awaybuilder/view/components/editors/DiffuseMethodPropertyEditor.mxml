<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:components="awaybuilder.view.components.*" 
					xmlns:controls="awaybuilder.view.components.controls.*"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:editors="awaybuilder.view.components.editors.*" 
					>
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script><![CDATA[
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.DiffuseMethodVO;
		import awaybuilder.model.vo.scene.TextureVO;
		import awaybuilder.view.components.controls.events.ExtendedDropDownEvent;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.collections.ArrayCollection;
		import mx.events.ColorPickerEvent;
		
		import spark.events.IndexChangeEvent;
		
		[Bindable]
		private var _asset:DiffuseMethodVO;
		
		[Bindable] private var _selectedTexture:AssetVO;
		
		override protected function validate(asset:AssetVO):void
		{
			if( !(asset is DiffuseMethodVO) ) return;
			_asset = DiffuseMethodVO(asset).clone();
			if( _asset.texture )
			{
				for each(asset in textures) 
				{
					if( asset.equals( _asset.texture ) ) _selectedTexture = asset as AssetVO;
				}
			}
		}
		
		private function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES,  prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
		private function name_changeHandler(event:Event):void 
		{
			_asset.name = nameInput.text;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.DIFFUSE_METHOD_STEPPER_CHANGE, _asset, true));
		}
		protected function textureDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.DIFFUSE_METHOD_ADD_TEXTURE, _asset, true));
		}
		private function textureDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			_asset.texture = textureDropDownList.selectedItem as TextureVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.DIFFUSE_METHOD_CHANGE, _asset, true));
		}
		private function editTextureButton_clickHandler(event:MouseEvent):void 
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.texture, true));
		}
		private function assetDropDownLabelFunction(item:AssetVO):Object 
		{
			return item.name;
		}
		private function textureIconFunction(asset:AssetVO):Object 
		{
			if( asset is TextureVO ) 
			{
				return TextureVO(asset).bitmapData;
			}
			return null;
		}
		
		private function myFormatFunc(val:Number):String 
		{ 
			return val.toString().replace(".",","); 
		} 
		
		private function myParseFunc(val:String):Number 
		{ 
			var stringVal:String = val.replace(",","."); 
			return Number(stringVal);     
		} 
		
		protected function colorPicker_changeHandler(event:ColorPickerEvent):void
		{
			_asset.color = colorPicker.selectedColor;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.DIFFUSE_METHOD_CHANGE, _asset, true));
		}
		
	]]></fx:Script>
	
	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="DiffuseMethod" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	<s:Spacer height="4"/>
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin" enabled="{!_asset.isDefault}">
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)"/>
		</s:FormItem>
		<s:FormItem label="Alpha" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:NumericStepper id="alphaOffsetStepper" minimum="0" maximum="1" value="{_asset.alpha}" stepSize="0.01" valueFormatFunction="myFormatFunc" />
		</s:FormItem>
		<s:FormItem label="Color" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<mx:ColorPicker id="colorPicker" selectedColor="{_asset.color}" change="colorPicker_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	
	<s:VGroup width="100%" paddingLeft="10" enabled="{!_asset.isDefault}">
		<s:HGroup width="100%">
			<s:Label text="Texture:" fontWeight="bold"/>
			<controls:HorizontalFormSeparator/>
		</s:HGroup>
		<s:HGroup width="100%" >
			<controls:ExtendedDropDownList id="textureDropDownList" width="100%" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
										   itemRenderer="awaybuilder.view.components.editors.renderers.TextureItemRenderer"
										   dataProvider="{textures}" selectedItem="{_selectedTexture}"
										   labelFunction="{assetDropDownLabelFunction}"
										   newItemLabel="Add New Texture"
										   iconFunction="{textureIconFunction}"
										   change="textureDropDownList_changeHandler(event)"
										   addNewItem="textureDropDownList_addNewItemHandler(event)"
										   />
			<s:Button id="editTextureButton" styleName="editSharedObjectButtonStyle"
					  width="23" height="100%" click="editTextureButton_clickHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
		
	
	
</editors:EditorBase>
