<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:components="awaybuilder.view.components.*" xmlns:controls="awaybuilder.view.components.controls.*"
		  currentState="{_asset.type}" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:editors="awaybuilder.view.components.editors.*" >
    <fx:Declarations>
		<s:RadioButtonGroup id="typeRadioGroup" selectedValue="{_asset.type}" change="typeRadioGroup_changeHandler(event)"/>
    </fx:Declarations>
	<editors:states>
		<s:State name="textureType"/>
		<s:State name="colorType"/>
	</editors:states>
    <fx:Script><![CDATA[
		import awaybuilder.model.vo.scene.AmbientMethodVO;
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.DiffuseMethodVO;
		import awaybuilder.model.vo.scene.LightPickerVO;
		import awaybuilder.model.vo.scene.MaterialVO;
		import awaybuilder.model.vo.scene.NormalMethodVO;
		import awaybuilder.model.vo.scene.ShadowMethodVO;
		import awaybuilder.model.vo.scene.SpecularMethodVO;
		import awaybuilder.model.vo.scene.TextureVO;
		import awaybuilder.model.vo.scene.interfaces.ITextured;
		import awaybuilder.view.components.controls.events.DroppedEvent;
		import awaybuilder.view.components.controls.events.ExtendedDropDownEvent;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.collections.ArrayCollection;
		import mx.events.ColorPickerEvent;
		
		import spark.events.IndexChangeEvent;

		[Bindable] private var _selectedDiffuseMethod:AssetVO;
		
		[Bindable] private var _selectedSpecularMethod:AssetVO;
		
		[Bindable] private var _selectedAmbientMethod:AssetVO;
		
		[Bindable] private var _selectedNormalMethod:AssetVO;
		
		[Bindable] private var _selectedLightPicker:AssetVO;
		
		[Bindable] private var _selectedShadowMethod:AssetVO;
		
		[Bindable] private var _asset:MaterialVO;
		
		override protected function validate(asset:AssetVO):void
		{
			if( !(asset is MaterialVO) ) return;
			_asset = MaterialVO(asset).clone();
			
			if( _asset.lightPicker )
			{
				
				for each(var picker:AssetVO in lightPickers) 
				{
					if(  asset.equals( _asset.lightPicker ) ) _selectedLightPicker = picker;
				}
			}
			else 
			{
				_selectedLightPicker = lightPickers.getItemAt(0) as AssetVO;
			}
			
			var method:AssetVO;
			
			if( _asset.shadowMethod )
			{
				for each(method in shadowMethods) 
				{
					if( method.equals( _asset.shadowMethod ) ) _selectedShadowMethod = method as AssetVO;
				}
			}
			else
			{
				_selectedShadowMethod = shadowMethods.getItemAt(0) as AssetVO;
			}
			
			for each(method in normalMethods) 
			{
				if( method.equals( _asset.normalMethod ) ) _selectedNormalMethod = method as AssetVO;
			}
			for each(method in diffuseMethods) 
			{
				if( method.equals( _asset.diffuseMethod ) ) _selectedDiffuseMethod = method as AssetVO;
			}
			
			for each(method in ambientMethods) 
			{
				if( method.equals( _asset.ambientMethod ) ) _selectedAmbientMethod = method as AssetVO;
			}
			
			for each(method in specularMethods) 
			{
				if( method.equals( _asset.specularMethod ) ) _selectedSpecularMethod = method as AssetVO;
			}
			
		}
		
		private var _shadowMethods:ArrayCollection;
		[Bindable]
		public function get shadowMethods():ArrayCollection
		{
			return _shadowMethods;
		}
		public function set shadowMethods(value:ArrayCollection):void
		{
			_shadowMethods = value;
		}
		
		private var _normalMethods:ArrayCollection;
		[Bindable]
		public function get normalMethods():ArrayCollection
		{
			return _normalMethods;
		}
		public function set normalMethods(value:ArrayCollection):void
		{
			_normalMethods = value;
		}
		
		private var _diffuseMethods:ArrayCollection;
		[Bindable]
		public function get diffuseMethods():ArrayCollection
		{
			return _diffuseMethods;
		}
		public function set diffuseMethods(value:ArrayCollection):void
		{
			_diffuseMethods = value;
		}
		
		private var _ambientMethods:ArrayCollection;
		[Bindable]
		public function get ambientMethods():ArrayCollection
		{
			return _ambientMethods;
		}
		public function set ambientMethods(value:ArrayCollection):void
		{
			_ambientMethods = value;
		}
		
		private var _specularMethods:ArrayCollection;
		[Bindable]
		public function get specularMethods():ArrayCollection
		{
			return _specularMethods;
		}
		public function set specularMethods(value:ArrayCollection):void
		{
			_specularMethods = value;
		}
		
        private function name_changeHandler(event:Event):void 
		{
			_asset.name = nameInput.text;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_NAME_CHANGE, _asset, true));
        }

        private function basicProperties_changeHandler(event:Event):void 
		{
			_asset.repeat = repeatBox.selected;
			_asset.smooth = smoothBox.selected;
			_asset.bothSides = bothSidesBox.selected;
			_asset.mipmap = mipmapBox.selected;
			_asset.alphaPremultiplied = alphaPremultipliedBox.selected;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
        }

		private function shadowMethodDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			if( shadowMethodDropDownList.selectedItem.linkedObject ) 
			{
				_asset.shadowMethod = shadowMethodDropDownList.selectedItem as ShadowMethodVO;
			}
			else
			{
				_asset.shadowMethod = null;
			}
			
			
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		private function lightPickerDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			if( lightPickerDropDownList.selectedItem.linkedObject ) 
			{
				_asset.lightPicker = lightPickerDropDownList.selectedItem as LightPickerVO;
			}
			else
			{
				_asset.lightPicker = null;
			}
			
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		private function dropDownIconFunction(item:TextureVO):Object 
		{
			return item.bitmapData;
		}
		
		private function dropDownLabelFunction(item:TextureVO):Object 
		{
			return item.name.split("/").pop();
		}
		private function assetDropDownLabelFunction(item:AssetVO):Object 
		{
			return item.name;
		}
		protected function shadowMethodDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_SHADOWMETHOD, _asset, true));
		}
		protected function lightPickerDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_LIGHTPICKER, _asset, true));
		}
		protected function diffuseDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_DIFFUSE_METHOD, _asset, true));
		}
		protected function normalDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_NORMAL_METHOD, _asset, true));
		}
		protected function specularDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_SPECULAR_METHOD, _asset, true));
		}
		protected function ambientDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_AMBIENT_METHOD, _asset, true));
		}
		
		protected function typeRadioGroup_changeHandler(event:Event):void
		{
			_asset.type = typeRadioGroup.selectedValue as String;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function diffuseColorPicker_changeHandler(event:ColorPickerEvent):void
		{
//			_asset.diffuseColor = diffuseColorPicker.selectedColor;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES, prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
		
		protected function blendModeList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.blendMode = blendModeList.selectedItem;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function addEffectMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_EFFECT_METHOD, _asset, true));
		}
		
		protected function deleteEffectMethodButton_clickHandler(event:MouseEvent):void
		{
			if( effectMethodsList.selectedItem )
			{
				dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_REMOVE_EFFECT_METHOD, effectMethodsList.selectedItem, true));
			}
		}
		
		protected function editPickerButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.lightPicker, true));
		}
		protected function editShadowMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.shadowMethod, true));
		}
		protected function editDiffuseMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.diffuseMethod, true));
		}
		protected function editAmbientMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.ambientMethod, true));
		}
		protected function editNormalMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.normalMethod, true));
		}
		protected function editSpecularMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.specularMethod, true));
		}
		
		protected function effectMethodsList_droppedHandler(event:DroppedEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		
		protected function diffuseMethodDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.diffuseMethod = diffuseMethodDropDownList.selectedItem as DiffuseMethodVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function diffuseMethodDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_DIFFUSE_METHOD, _asset, true));
		}
		private function texturedIconFunction(asset:ITextured):Object 
		{
			if( asset.texture && asset.texture.bitmapData )
			{
				return asset.texture.bitmapData;
			}
			var color:int;
			if( asset is DiffuseMethodVO ){
				color = DiffuseMethodVO( asset).color;
			}
			if( asset is AmbientMethodVO ){
				color = AmbientMethodVO( asset).color;
			}
			if( asset is SpecularMethodVO ){
				color = SpecularMethodVO( asset).color;
			}
			return new BitmapData(32, 32, false, color);
		}
		
		
		protected function ambientMethodDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_AMBIENT_METHOD, _asset, true));
		}
		protected function ambientMethodDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.ambientMethod = diffuseMethodDropDownList.selectedItem as AmbientMethodVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
			
		}
		
		protected function specularMethodDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.specularMethod = specularMethodDropDownList.selectedItem as SpecularMethodVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		protected function specularMethodDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_SPECULAR_METHOD, _asset, true));
		}
		
		protected function normalMethodDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.normalMethod = normalMethodDropDownList.selectedItem as NormalMethodVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		protected function normalMethodDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_NORMAL_METHOD, _asset, true));
		}
		
	]]></fx:Script>

	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Material" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	
	<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
		<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)" enabled="{!_asset.isDefault}"/>
	</s:FormItem>
	
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="6" paddingRight="6" paddingTop="6" paddingBottom="6" enabled="{!_asset.isDefault}" horizontalAlign="center">
		<s:RadioButton label="Texture" width="100%" group="{typeRadioGroup}" value="{MaterialVO.TEXTURE}"/>
		<s:RadioButton label="Color" width="100%" group="{typeRadioGroup}" value="{MaterialVO.COLOR}"/>
	</s:HGroup>
	
    <controls:CollapsiblePanel width="100%" title="General" collapsed="true">
        <s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin" enabled="{!_asset.isDefault}">
			<!--<s:FormItem label="Alpha" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="alphaStepper" minimum="0" maximum="100" value="{_asset.diffuseAlpha*100}" width="100%"
								  change="alphaStepper_changeHandler(event)" enabled="{!_isDefault}"/>
			</s:FormItem>-->
			<s:FormItem label="repeat" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:CheckBox id="repeatBox" change="basicProperties_changeHandler(event)" selected="{_asset.repeat}" />
			</s:FormItem>
			<s:FormItem label="smooth" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:CheckBox id="smoothBox" change="basicProperties_changeHandler(event)" selected="{_asset.smooth}"/>
			</s:FormItem>
			<s:FormItem label="mipmap" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:CheckBox id="mipmapBox" change="basicProperties_changeHandler(event)" selected="{_asset.mipmap}" />
			</s:FormItem>
			<s:FormItem label="both sides" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:CheckBox id="bothSidesBox" change="basicProperties_changeHandler(event)" selected="{_asset.bothSides}" />
			</s:FormItem>
			<s:FormItem label="alpha premultiplied" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:CheckBox id="alphaPremultipliedBox" change="basicProperties_changeHandler(event)" selected="{_asset.alphaPremultiplied}" />
			</s:FormItem>
			<s:FormItem label="blend mode" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" includeIn="textureType">
				<s:DropDownList id="blendModeList" selectedItem="{_asset.blendMode}" change="blendModeList_changeHandler(event)" width="100%"
								dataProvider="{new ArrayCollection([BlendMode.NORMAL,BlendMode.MULTIPLY,BlendMode.ADD,BlendMode.ALPHA])}"
								/>
			</s:FormItem>
        </s:Form>
		<s:VGroup width="100%" paddingLeft="10" enabled="{!_asset.isDefault}">
			<s:HGroup width="100%">
				<s:Label text="Light Picker:" fontWeight="bold"/>
				<controls:HorizontalFormSeparator/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<controls:ExtendedDropDownList id="lightPickerDropDownList" width="100%" height="24" skinClass="awaybuilder.view.skins.ThinExtendedDropDownListSkin"
											   dataProvider="{lightPickers}" selectedItem="{_selectedLightPicker}" requireSelection="true"
											   labelFunction="{assetDropDownLabelFunction}"
											   newItemLabel="New LightPicker"
											   change="lightPickerDropDownList_changeHandler(event)"
											   addNewItem="lightPickerDropDownList_addNewItemHandler(event)"
											   />
				<s:Button styleName="editSharedObjectButtonStyle"
						  width="23" height="100%" click="editPickerButton_clickHandler(event)" enabled="{lightPickerDropDownList.selectedItem.linkedObject}"/>
			</s:HGroup>
			<s:VGroup width="100%" includeIn="textureType">
				<s:HGroup width="100%">
					<s:Label text="Shadow Method:" fontWeight="bold"/>
					<controls:HorizontalFormSeparator/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<controls:ExtendedDropDownList id="shadowMethodDropDownList" width="100%" height="24" skinClass="awaybuilder.view.skins.ThinExtendedDropDownListSkin"
												   dataProvider="{shadowMethods}" selectedItem="{_selectedShadowMethod}" requireSelection="true"
												   labelFunction="{assetDropDownLabelFunction}"
												   newItemLabel="New ShadowMethod"
												   change="shadowMethodDropDownList_changeHandler(event)"
												   addNewItem="shadowMethodDropDownList_addNewItemHandler(event)"
												   />
					<s:Button styleName="editSharedObjectButtonStyle"
							  width="23" height="100%" click="editShadowMethodButton_clickHandler(event)" enabled="{shadowMethodDropDownList.selectedItem.linkedObject}"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
    </controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Methods" collapsed="true" includeIn="textureType">
		<s:VGroup width="100%" paddingLeft="10" enabled="{!_asset.isDefault}">
			<s:VGroup width="100%" includeIn="textureType">
				<s:HGroup width="100%">
					<s:Label text="Diffuse Method:" fontWeight="bold"/>
					<controls:HorizontalFormSeparator/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<controls:ExtendedDropDownList id="diffuseMethodDropDownList" width="100%" height="40" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
												   itemRenderer="awaybuilder.view.components.editors.renderers.TexturedItemRenderer" 
												   dataProvider="{diffuseMethods}" selectedItem="{_selectedDiffuseMethod}" requireSelection="true"
												   iconFunction="{texturedIconFunction}" labelField="name" newItemLabel="New DiffuseMethod"
												   change="diffuseMethodDropDownList_changeHandler(event)" addNewItem="diffuseMethodDropDownList_addNewItemHandler(event)"/>
					
					<s:Button styleName="editSharedObjectButtonStyle"
							  width="23" height="100%" click="editDiffuseMethodButton_clickHandler(event)" enabled="{diffuseMethodDropDownList.selectedItem.linkedObject}"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup width="100%" includeIn="textureType">
				<s:HGroup width="100%">
					<s:Label text="Ambient Method:" fontWeight="bold"/>
					<controls:HorizontalFormSeparator/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<controls:ExtendedDropDownList id="ambientMethodDropDownList" width="100%" height="40" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
												   itemRenderer="awaybuilder.view.components.editors.renderers.TexturedItemRenderer" 
												   dataProvider="{ambientMethods}" selectedItem="{_selectedAmbientMethod}" requireSelection="true"
												   iconFunction="{texturedIconFunction}" labelFunction="{assetDropDownLabelFunction}" newItemLabel="New AmbientMethod"
												   change="ambientMethodDropDownList_changeHandler(event)" addNewItem="ambientMethodDropDownList_addNewItemHandler(event)"/>
					<s:Button styleName="editSharedObjectButtonStyle"
							  width="23" height="100%" click="editAmbientMethodButton_clickHandler(event)" enabled="{ambientMethodDropDownList.selectedItem.linkedObject}"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup width="100%" includeIn="textureType">
				<s:HGroup width="100%">
					<s:Label text="Specular Method:" fontWeight="bold"/>
					<controls:HorizontalFormSeparator/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<controls:ExtendedDropDownList id="specularMethodDropDownList" width="100%" height="40" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
												   itemRenderer="awaybuilder.view.components.editors.renderers.TexturedItemRenderer" 
												   dataProvider="{specularMethods}" selectedItem="{_selectedSpecularMethod}" requireSelection="true"
												   iconFunction="{texturedIconFunction}" labelFunction="{assetDropDownLabelFunction}" newItemLabel="New SpecularMethod"
												   change="specularMethodDropDownList_changeHandler(event)" addNewItem="specularMethodDropDownList_addNewItemHandler(event)"/>
					<s:Button styleName="editSharedObjectButtonStyle"
							  width="23" height="100%" click="editSpecularMethodButton_clickHandler(event)" enabled="{specularMethodDropDownList.selectedItem.linkedObject}"/>
				</s:HGroup>
			</s:VGroup>
			<s:VGroup width="100%">
				<s:HGroup width="100%">
					<s:Label text="Normal Method:" fontWeight="bold"/>
					<controls:HorizontalFormSeparator/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<controls:ExtendedDropDownList id="normalMethodDropDownList" width="100%" height="40" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
												   itemRenderer="awaybuilder.view.components.editors.renderers.TexturedItemRenderer" 
												   dataProvider="{normalMethods}" selectedItem="{_selectedNormalMethod}" requireSelection="true"
												   iconFunction="{texturedIconFunction}" labelFunction="{assetDropDownLabelFunction}" newItemLabel="New NormalMethod"
												   change="normalMethodDropDownList_changeHandler(event)" addNewItem="normalMethodDropDownList_addNewItemHandler(event)"/>
					<s:Button styleName="editSharedObjectButtonStyle"
							  width="23" height="100%" click="editNormalMethodButton_clickHandler(event)" enabled="{normalMethodDropDownList.selectedItem.linkedObject}"/>
				</s:HGroup>
			</s:VGroup>
		</s:VGroup>
	</controls:CollapsiblePanel>
	
	<controls:CollapsiblePanel width="100%" title="Effect Methods" collapsed="true" enabled="{!_asset.isDefault}">
		<controls:DroppableEffectsList id="effectMethodsList" dataProvider="{_asset.effectMethods}" 
									  dropEnabled="true" width="100%" 
									  skinClass="awaybuilder.view.skins.AssetChildrenListSkin" 
									  itemRenderer="awaybuilder.view.components.editors.renderers.AssetChildItemRenderer"
									  dropped="effectMethodsList_droppedHandler(event)"/>
		<s:HGroup width="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" horizontalAlign="right">
			
			<s:Button id="addEffectMethodButton" toolTip="New Effect Method" styleName="addButton" click="addEffectMethodButton_clickHandler(event)"/>
			<s:Button id="deleteEffectMethodButton" enabled="{effectMethodsList.selectedItem}" toolTip="Remove" styleName="removeButton" click="deleteEffectMethodButton_clickHandler(event)" />
		</s:HGroup>
	</controls:CollapsiblePanel>
</editors:EditorBase>
