<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:components="awaybuilder.view.components.*" xmlns:controls="awaybuilder.view.components.controls.*"
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:editors="awaybuilder.view.components.editors.*" >
    <fx:Declarations>
		<s:RadioButtonGroup id="typeRadioGroup" selectedValue="{_asset.type}" change="typeRadioGroup_changeHandler(event)"/>
    </fx:Declarations>
    <fx:Script><![CDATA[
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.LightPickerVO;
		import awaybuilder.model.vo.scene.LightVO;
		import awaybuilder.model.vo.scene.MaterialVO;
		import awaybuilder.model.vo.scene.ShadowMethodVO;
		import awaybuilder.model.vo.scene.TextureVO;
		import awaybuilder.model.vo.scene.interfaces.ITextured;
		import awaybuilder.view.components.controls.events.DroppedEvent;
		import awaybuilder.view.components.controls.events.ExtendedDropDownEvent;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.collections.ArrayCollection;
		import mx.events.ColorPickerEvent;
		
		import spark.events.IndexChangeEvent;

		[Bindable] private var _selectedDiffuseMethod:AssetVO;
		
		[Bindable] private var _selectedSpecularMethod:AssetVO;
		
		[Bindable] private var _selectedAmbientMethod:AssetVO;
		
		[Bindable] private var _selectedNormalMethod:AssetVO;
		
		[Bindable] private var _selectedLightPicker:AssetVO;
		
		[Bindable] private var _lights:ArrayCollection;
		[Bindable] private var _selectedLight:AssetVO;
		
		[Bindable] private var _shadowMethods:ArrayCollection;
		[Bindable] private var _selectedShadowMethod:AssetVO;
		
		[Bindable] private var _selectedTexture:TextureVO;
		
		[Bindable] private var _asset:MaterialVO;
		
		override protected function validate(asset:AssetVO):void
		{
			if( !(asset is MaterialVO) ) return;
			_asset = MaterialVO(asset).clone();
			
			for each(var texture:TextureVO in textures) 
			{
				if( texture.equals( _asset.texture ) ) _selectedTexture = texture;
			}
			
			var a:AssetVO;
			
			var lights:Array = [];
			var shadowMehtods:Array = [];
			var nullItem:AssetVO = new AssetVO();
			nullItem.name = "Null";
			nullItem.isNull = true;
			
			lights.push( nullItem );
			shadowMehtods.push( nullItem );
			
			if( _asset.lightPicker )
			{
				for each(var picker:AssetVO in lightPickers) 
				{
					if(  picker.equals( _asset.lightPicker ) ) _selectedLightPicker = picker;
				}
				for each(a in _asset.lightPicker.lights ) 
				{
					lights.push( a );
				}
			}
			else 
			{
				_selectedLightPicker = lightPickers.getItemAt(0) as AssetVO;
			}
			
			
			if( _asset.light && _asset.lightPicker )
			{
				
				//					trace( "_asset.light = " + _asset.light.name );
				for each(var light:AssetVO in lights ) 
				{
					if( light.equals( _asset.light ) ) _selectedLight = light;
				}
				
				for each(a in _asset.light.shadowMethods ) 
				{
					shadowMehtods.push( a );
				}
				
			}
			else 
			{
				_selectedLight = lights[0] as AssetVO;
			}
			
			if( _asset.shadowMethod && _asset.light && _asset.lightPicker )
			{
				for each(var method:AssetVO in shadowMehtods ) 
				{
					if( method.equals( _asset.shadowMethod ) ) _selectedShadowMethod = method;
				}
				
			}
			else 
			{
				_selectedShadowMethod = shadowMehtods[0] as AssetVO;
			}
			
			_shadowMethods = new ArrayCollection(shadowMehtods);
			_lights = new ArrayCollection(lights);
		}
		
        private function name_changeHandler(event:Event):void 
		{
			_asset.name = nameInput.text;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_NAME_CHANGE, _asset, true));
        }

        private function basicProperties_changeHandler(event:Event):void 
		{
			_asset.repeat = repeatBox.selected;
			_asset.smooth = smoothBox.selected;
			_asset.bothSides = bothSidesBox.selected;
			_asset.mipmap = mipmapBox.selected;
			_asset.alphaPremultiplied = alphaPremultipliedBox.selected;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
        }

		private function shadowMethodDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			if( !shadowMethodDropDownList.selectedItem.isNull) 
			{
				_asset.shadowMethod = shadowMethodDropDownList.selectedItem as ShadowMethodVO;
			}
			else
			{
				_asset.shadowMethod = null;
			}
			
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		private function lightPickerDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			if( !lightPickerDropDownList.selectedItem.isNull ) 
			{
				_asset.lightPicker = lightPickerDropDownList.selectedItem as LightPickerVO;
			}
			else
			{
				_asset.lightPicker = null;
				_asset.light = null;
				_asset.shadowMethod = null;
			}
			
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		protected function shadowLightDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			if( !shadowLightDropDownList.selectedItem.isNull) 
			{
				_asset.light = shadowLightDropDownList.selectedItem as LightVO;
			}
			else
			{
				_asset.light = null;
				_asset.shadowMethod = null;
			}
			
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		private function dropDownIconFunction(item:TextureVO):Object 
		{
			return item.bitmapData;
		}
		
		private function dropDownLabelFunction(item:TextureVO):Object 
		{
			return item.name.split("/").pop();
		}
		private function assetDropDownLabelFunction(item:AssetVO):Object 
		{
			return item.name;
		}
		protected function lightPickerDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_LIGHTPICKER, _asset, true));
		}
		
		protected function typeRadioGroup_changeHandler(event:Event):void
		{
			_asset.type = typeRadioGroup.selectedValue as String;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function diffuseColorPicker_changeHandler(event:ColorPickerEvent):void
		{
//			_asset.diffuseColor = diffuseColorPicker.selectedColor;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES, prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
		
		protected function blendModeList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.blendMode = blendModeList.selectedItem;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function addEffectMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_EFFECT_METHOD, _asset, true));
		}
		
		protected function deleteEffectMethodButton_clickHandler(event:MouseEvent):void
		{
			if( effectMethodsList.selectedItem )
			{
				dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_REMOVE_EFFECT_METHOD, effectMethodsList.selectedItem, true));
			}
		}
		
		protected function editPickerButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.lightPicker, true));
		}
		protected function editShadowMethodButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.shadowMethod, true));
		}
		
		protected function effectMethodsList_droppedHandler(event:DroppedEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		private function texturedIconFunction(asset:ITextured):Object 
		{
			if( asset.texture && asset.texture.bitmapData )
			{
				return asset.texture.bitmapData;
			}
			var color:int;
			return new BitmapData(32, 32, false, color);
		}
		
		
		protected function textureDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_ADD_TEXTURE, _asset, true));
		}
		
		protected function textureDropDownList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.texture = textureDropDownList.selectedItem;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MATERIAL_CHANGE, _asset, true));
		}
		
		protected function textureButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.texture, true));
		}
		
		protected function alphaStepper_changeHandler(event:Event):void
		{
			// TODO Auto-generated method stub
			
		}
		private function stepperFormatFunc(val:Number):String 
		{ 
			return val.toString().replace(".",","); 
		} 
		
		private function stepperParseFunc(val:String):Number 
		{ 
			var stringVal:String = val.replace(",","."); 
			return Number(stringVal);     
		} 
		
		protected function editLightButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.light, true));
		}
		
	]]></fx:Script>

	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Material" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	<s:Spacer height="6"/>
	
    <controls:CollapsiblePanel width="100%" title="General" collapsed="true">
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="6" paddingRight="6" paddingTop="6" paddingBottom="6" enabled="{!_asset.isDefault}" horizontalAlign="center">
			<s:RadioButton label="Singlepass" width="100%" group="{typeRadioGroup}" value="{MaterialVO.SINGLEPASS}"/>
			<s:RadioButton label="Multipass" width="100%" group="{typeRadioGroup}" value="{MaterialVO.MULTIPASS}"/>
		</s:HGroup>
		<controls:HorizontalFormSeparator/>
        <s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin" enabled="{!_asset.isDefault}">
			<!--<s:FormItem label="Alpha" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="alphaStepper" minimum="0" maximum="100" value="{_asset.diffuseAlpha*100}" width="100%"
								  change="alphaStepper_changeHandler(event)" enabled="{!_isDefault}"/>
			</s:FormItem>-->
			<s:FormItem label="repeat" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" >
				<s:CheckBox id="repeatBox" change="basicProperties_changeHandler(event)" selected="{_asset.repeat}" />
			</s:FormItem>
			<s:FormItem label="smooth" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:CheckBox id="smoothBox" change="basicProperties_changeHandler(event)" selected="{_asset.smooth}"/>
			</s:FormItem>
			<s:FormItem label="mipmap" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" >
				<s:CheckBox id="mipmapBox" change="basicProperties_changeHandler(event)" selected="{_asset.mipmap}" />
			</s:FormItem>
			<s:FormItem label="both sides" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" >
				<s:CheckBox id="bothSidesBox" change="basicProperties_changeHandler(event)" selected="{_asset.bothSides}" />
			</s:FormItem>
			<s:FormItem label="Alpha" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="alphaStepper" valueFormatFunction="stepperFormatFunc" valueParseFunction="stepperParseFunc"
								  minimum="0" maximum="1" stepSize="0.01" width="100%" value="{_asset.alpha}"
								  change="alphaStepper_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Alpha Blending" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%" >
				<s:CheckBox id="alphaBlendingBox" change="basicProperties_changeHandler(event)" selected="{_asset.alphaBlending}" />
			</s:FormItem>
			<s:FormItem label="Pre-multiplied" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:CheckBox id="alphaPremultipliedBox" change="basicProperties_changeHandler(event)" selected="{_asset.alphaPremultiplied}" />
			</s:FormItem>
			<s:FormItem label="blend mode" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:DropDownList id="blendModeList" selectedItem="{_asset.blendMode}" change="blendModeList_changeHandler(event)" width="100%"
								dataProvider="{new ArrayCollection([BlendMode.NORMAL,BlendMode.MULTIPLY,BlendMode.ADD,BlendMode.ALPHA,BlendMode.LAYER])}"
								/>
			</s:FormItem>
        </s:Form>
		
    </controls:CollapsiblePanel>
	
	<controls:CollapsiblePanel width="100%" title="Colors &amp; Textures" collapsed="true" enabled="{!_asset.isDefault}">
		<s:HGroup width="100%" verticalAlign="middle">
			<controls:ExtendedDropDownList id="textureDropDownList" width="100%" height="40" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
										   itemRenderer="awaybuilder.view.components.editors.renderers.TextureItemRenderer"
										   dataProvider="{textures}" selectedItem="{_selectedTexture}" requireSelection="true"
										   labelFunction="{dropDownLabelFunction}" iconFunction="{dropDownIconFunction}"
										   newItemLabel="New Texture"
										   change="textureDropDownList_changeHandler(event)"
										   addNewItem="textureDropDownList_addNewItemHandler(event)"
										   />
			<s:Button styleName="editSharedObjectButtonStyle"
					  width="23" height="100%" click="textureButton_clickHandler(event)" enabled="{textureDropDownList.selectedItem}"/>
		</s:HGroup>
	</controls:CollapsiblePanel>
	
	<controls:CollapsiblePanel width="100%" title="Lighting" collapsed="true">
		<s:VGroup width="100%" paddingLeft="10" enabled="{!_asset.isDefault}">
			<s:HGroup width="100%">
				<s:Label text="Light Picker:" fontWeight="bold"/>
				<controls:HorizontalFormSeparator/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle">
				<controls:ExtendedDropDownList id="lightPickerDropDownList" width="100%" height="24" skinClass="awaybuilder.view.skins.ThinExtendedDropDownListSkin"
											   dataProvider="{lightPickers}" selectedItem="{_selectedLightPicker}" requireSelection="true"
											   labelFunction="{assetDropDownLabelFunction}"
											   newItemLabel="New LightPicker"
											   change="lightPickerDropDownList_changeHandler(event)"
											   addNewItem="lightPickerDropDownList_addNewItemHandler(event)"
											   />
				<s:Button styleName="editSharedObjectButtonStyle"
						  width="23" height="100%" click="editPickerButton_clickHandler(event)" enabled="{!lightPickerDropDownList.selectedItem.isNull}"/>
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Label text="Shadow Light:" fontWeight="bold"/>
				<controls:HorizontalFormSeparator/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle" enabled="{!lightPickerDropDownList.selectedItem.isNull}">
				<s:DropDownList id="shadowLightDropDownList" itemRenderer="awaybuilder.view.components.editors.renderers.DropDownItemRenderer" labelFunction="assetDropDownLabelFunction"
								change="shadowLightDropDownList_changeHandler(event)" width="100%" requireSelection="true"
								selectedItem="{_selectedLight}" dataProvider="{_lights}"/>
				<s:Button styleName="editSharedObjectButtonStyle"
						  width="23" height="100%" click="editLightButton_clickHandler(event)" enabled="{!shadowLightDropDownList.selectedItem.isNull}"/>
			</s:HGroup>
			<s:HGroup width="100%">
				<s:Label text="Shadow Method:" fontWeight="bold"/>
				<controls:HorizontalFormSeparator/>
			</s:HGroup>
			<s:HGroup width="100%" verticalAlign="middle" enabled="{!lightPickerDropDownList.selectedItem.isNull&amp;&amp;!_selectedLight.isNull}">
				<s:DropDownList id="shadowMethodDropDownList" itemRenderer="awaybuilder.view.components.editors.renderers.DropDownItemRenderer" requireSelection="true" labelFunction="assetDropDownLabelFunction"
								change="shadowMethodDropDownList_changeHandler(event)" width="100%"
								selectedItem="{_selectedShadowMethod}" dataProvider="{_shadowMethods}"
								/>
				<s:Button styleName="editSharedObjectButtonStyle"
						  width="23" height="100%" click="editShadowMethodButton_clickHandler(event)" enabled="{!shadowMethodDropDownList.selectedItem.isNull}"/>
			</s:HGroup>
		</s:VGroup>
	</controls:CollapsiblePanel>
	
	<controls:CollapsiblePanel width="100%" title="Shading" collapsed="true" enabled="{!_asset.isDefault}">
	</controls:CollapsiblePanel>
	
	<controls:CollapsiblePanel width="100%" title="Effect Methods" collapsed="true" enabled="{!_asset.isDefault}">
		<controls:DroppableEffectsList id="effectMethodsList" dataProvider="{_asset.effectMethods}" 
									  dropEnabled="true" width="100%" 
									  skinClass="awaybuilder.view.skins.AssetChildrenListSkin" 
									  itemRenderer="awaybuilder.view.components.editors.renderers.AssetChildItemRenderer"
									  dropped="effectMethodsList_droppedHandler(event)"/>
		<s:HGroup width="100%" paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" horizontalAlign="right">
			
			<s:Button id="addEffectMethodButton" toolTip="New Effect Method" styleName="addButton" click="addEffectMethodButton_clickHandler(event)"/>
			<s:Button id="deleteEffectMethodButton" enabled="{effectMethodsList.selectedItem}" toolTip="Remove" styleName="removeButton" click="deleteEffectMethodButton_clickHandler(event)" />
		</s:HGroup>
	</controls:CollapsiblePanel>
</editors:EditorBase>
