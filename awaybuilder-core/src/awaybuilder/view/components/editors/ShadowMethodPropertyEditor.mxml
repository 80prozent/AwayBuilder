<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:components="awaybuilder.view.components.*" 
					xmlns:controls="awaybuilder.view.components.controls.*"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:editors="awaybuilder.view.components.editors.*" 
					>
	<fx:Declarations>
		<s:ArrayCollection id="cascadeMethodsList">
			<fx:Object label="CascadeShadowMapMethod" value="{CascadeShadowMapMethod}"/>
		</s:ArrayCollection>
		<s:ArrayCollection id="directionalMethodsList">
			<fx:Object label="DitheredShadowMapMethod" value="{DitheredShadowMapMethod}"/>
			<fx:Object label="FilteredShadowMapMethod" value="{FilteredShadowMapMethod}"/>
			<fx:Object label="HardShadowMapMethod" value="{HardShadowMapMethod}"/>
			<fx:Object label="NearShadowMapMethod" value="{NearShadowMapMethod}"/>
			<fx:Object label="SoftShadowMapMethod" value="{SoftShadowMapMethod}"/>
		</s:ArrayCollection>
		<s:ArrayCollection id="cubeMethodsList">
			<fx:Object label="DitheredShadowMapMethod" value="{DitheredShadowMapMethod}"/>
			<fx:Object label="FilteredShadowMapMethod" value="{FilteredShadowMapMethod}"/>
			<fx:Object label="HardShadowMapMethod" value="{HardShadowMapMethod}"/>
			<fx:Object label="NearShadowMapMethod" value="{NearShadowMapMethod}"/>
			<fx:Object label="SoftShadowMapMethod" value="{SoftShadowMapMethod}"/>
		</s:ArrayCollection>
	</fx:Declarations>
	<editors:states>
		<s:State name="directional"/>
		<s:State name="cascade"/>
		<s:State name="cube"/>
	</editors:states>
	<fx:Script><![CDATA[
		import away3d.lights.shadowmaps.CascadeShadowMapper;
		import away3d.lights.shadowmaps.DirectionalShadowMapper;
		import away3d.materials.methods.CascadeShadowMapMethod;
		import away3d.materials.methods.DitheredShadowMapMethod;
		import away3d.materials.methods.FilteredShadowMapMethod;
		import away3d.materials.methods.HardShadowMapMethod;
		import away3d.materials.methods.NearShadowMapMethod;
		import away3d.materials.methods.SoftShadowMapMethod;
		import away3d.materials.methods.TripleFilteredShadowMapMethod;
		
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.LightVO;
		import awaybuilder.model.vo.scene.ShadowMethodVO;
		import awaybuilder.view.components.controls.events.ExtendedDropDownEvent;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.collections.ArrayCollection;
		
		import spark.events.IndexChangeEvent;
		
		[Bindable]
		private var _asset:ShadowMethodVO;
		
		[Bindable]
		private var _selectedLight:AssetVO;
		
		private var _lights:ArrayCollection;
		
		[Bindable]
		private var _selectedType:Object;
		
		[Bindable]
		public function get lights():ArrayCollection
		{
			return _lights;
		}
		public function set lights(value:ArrayCollection):void
		{
			_lights = value;
		}
		
		override protected function validate(asset:AssetVO):void
		{
			if( !(asset is ShadowMethodVO) ) return;
			_asset = ShadowMethodVO(asset).clone();
			for each(var light:AssetVO in lightPickers) 
			{
				if(  asset.equals( _asset.light ) ) _selectedLight = light;
			}
			var o:Object;
			if( _asset.light.shadowMapper is DirectionalShadowMapper ) 
			{
				currentState = "directional";
				for each( o in directionalMethodsList )
				{
					if( _asset.type == o.value )
					{
						_selectedType = o;
					}
				}
			}
			else if( _asset.light.shadowMapper is CascadeShadowMapper ) 
			{
				currentState = "cascade";
				for each( o in cascadeMethodsList )
				{
					if( _asset.type == o.value )
					{
						_selectedType = o;
					}
				}
			}
			else 
			{
				currentState = "cube";
				for each( o in cubeMethodsList )
				{
					if( _asset.type == o.value )
					{
						_selectedType = o;
					}
				}
			}
			
		}
		
		private function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES,  prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
		private function name_changeHandler(event:Event):void 
		{
			_asset.name = nameInput.text;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_STEPPER_CHANGE, _asset, true));
		}
		private function assetDropDownLabelFunction(item:AssetVO):Object 
		{
			return item.name;
		}
		private function lightDropDownList_changeHandler(event:IndexChangeEvent):void 
		{
			_asset.light = lightDropDownList.selectedItem as LightVO;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_CHANGE, _asset, true));
		}
		protected function lightDropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_CHANGE, _asset, true));
		}
		protected function editLightButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_CHILD_PROPERTIES, _asset.light, true));
		}
		
		protected function cascadeList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.type = cascadeList.selectedItem.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_CHANGE, _asset, true));
		}
		
		protected function directionalList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.type = directionalList.selectedItem.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_CHANGE, _asset, true));
		}
		
		protected function cubeList_changeHandler(event:IndexChangeEvent):void
		{
			_asset.type = cubeList.selectedItem.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHADOWMETHOD_CHANGE, _asset, true));
		}
		
	]]></fx:Script>
	
	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="ShadowMapMethod" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	<!--<s:HGroup width="100%" verticalAlign="middle" paddingLeft="6" paddingRight="6" paddingTop="6" paddingBottom="6" horizontalAlign="center">
		<s:RadioButton label="Directional" width="100%" group="{typeRadioGroup}" value="{LightVO.DIRECTIONAL}"/>
		<s:RadioButton label="Point" width="100%" group="{typeRadioGroup}" value="{LightVO.POINT}"/>
	</s:HGroup>-->
	<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
		
		<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
			<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)"/>
		</s:FormItem>
	</s:Form>
	<s:Spacer height="6"/>
	<s:VGroup width="100%" paddingLeft="10" paddingRight="8">
		
		<s:HGroup width="100%">
			<s:Label text="Light:" fontWeight="bold"/>
			<controls:HorizontalFormSeparator/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<controls:ExtendedDropDownList id="lightDropDownList" width="100%" height="24" skinClass="awaybuilder.view.skins.ThinExtendedDropDownListSkin"
										   dataProvider="{lights}" selectedItem="{_selectedLight}" requireSelection="true"
										   labelFunction="{assetDropDownLabelFunction}"
										   newItemLabel="New Light"
										   change="lightDropDownList_changeHandler(event)"
										   addNewItem="lightDropDownList_addNewItemHandler(event)"
										   />
			<s:Button styleName="editSharedObjectButtonStyle"
					  width="23" height="100%" click="editLightButton_clickHandler(event)" enabled="{lightDropDownList.selectedItem.linkedObject}"/>
		</s:HGroup>
	</s:VGroup>
	<s:Spacer height="6"/>
	<s:VGroup width="100%" paddingLeft="10" paddingRight="8">
	
		<s:HGroup width="100%">
			<s:Label text="Type:" fontWeight="bold"/>
			<controls:HorizontalFormSeparator/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="middle">
			<s:DropDownList id="cascadeList" includeIn="cascade" width="100%" requireSelection="true"
							dataProvider="{cascadeMethodsList}" selectedItem="{_selectedType}"
							change="cascadeList_changeHandler(event)"/>
			<s:DropDownList id="directionalList" includeIn="directional" width="100%" requireSelection="true"
							dataProvider="{directionalMethodsList}" selectedItem="{_selectedType}"
							change="directionalList_changeHandler(event)"/>
			<s:DropDownList id="cubeList" includeIn="cube" width="100%" requireSelection="true"
							dataProvider="{cubeMethodsList}" selectedItem="{_selectedType}"
							change="cubeList_changeHandler(event)"/>
		</s:HGroup>
	</s:VGroup>
	
</editors:EditorBase>
