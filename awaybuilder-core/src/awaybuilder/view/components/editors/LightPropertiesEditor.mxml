<?xml version="1.0" encoding="utf-8"?>
<editors:EditorBase xmlns:fx="http://ns.adobe.com/mxml/2009"
						    xmlns:s="library://ns.adobe.com/flex/spark" 
						    xmlns:components="awaybuilder.view.components.*" 
						    xmlns:controls="awaybuilder.view.components.controls.*"
						    xmlns:mx="library://ns.adobe.com/flex/mx"
						    currentState="{_asset.type}" xmlns:editors="awaybuilder.view.components.editors.*" 
						    >
	<fx:Declarations>
		<s:RadioButtonGroup id="typeRadioGroup" selectedValue="{_asset.type}" change="typeRadioGroup_changeHandler(event)"/>
	</fx:Declarations>
	<editors:states>
		<s:State name="directionalType"/>
		<s:State name="pointType"/>
	</editors:states>
	<fx:Script><![CDATA[
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		import awaybuilder.model.vo.scene.AssetVO;
		import awaybuilder.model.vo.scene.LightVO;
		import awaybuilder.model.vo.scene.MaterialVO;
		import awaybuilder.model.vo.scene.MeshVO;
		
		import mx.collections.ArrayCollection;
		import mx.events.ColorPickerEvent;
		
		[Bindable]
		private var _asset:LightVO;
		
		override protected function validate(asset:AssetVO):void
		{
			_asset = asset as LightVO;
		}
		
		private function name_changeHandler(event:Event):void {
			_asset.name = nameInput.text;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		
		private function position_commitHandler(event:Event):void {
			var newValue:Vector3D = new Vector3D(xStepper.value, yStepper.value, zStepper.value);
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_POSITION_CHANGE, newValue, true));
		}
		protected function typeRadioGroup_changeHandler(event:Event):void
		{
			_asset.type = typeRadioGroup.selectedValue as String;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_CHANGE, _asset, true));
		}
		protected function colorPicker_changeHandler(event:ColorPickerEvent):void
		{
			_asset.color = colorPicker.selectedColor;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_CHANGE, _asset, true));
		}
		protected function ambientColorPicker_changeHandler(event:ColorPickerEvent):void
		{
			_asset.ambientColor = ambientColorPicker.selectedColor;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_CHANGE, _asset, true));
		}
		
		protected function ambientStepper_changeHandler(event:Event):void
		{
			_asset.ambient = ambientStepper.value/100;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		
		protected function specularStepper_changeHandler(event:Event):void
		{
			_asset.specular = specularStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		
		protected function diffuseStepper_changeHandler(event:Event):void
		{
			_asset.diffuse = diffuseStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		
		protected function radiusStepper_changeHandler(event:Event):void
		{
			_asset.radius = radiusStepper.value;
			if (_asset.radius > _asset.fallOff) {
				_asset.fallOff = _asset.radius;
			}
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		protected function falloffStepper_changeHandler(event:Event):void
		{
			_asset.fallOff = falloffStepper.value;
			if (_asset.fallOff < _asset.radius) _asset.radius = _asset.fallOff;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		
		protected function directionStepper_changeHandler(event:Event):void
		{
			_asset.directionX = directionxStepper.value;
			_asset.directionY = directionyStepper.value;
			_asset.directionZ = directionzStepper.value;
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.LIGHT_STEPPER_CHANGE, _asset, true));
		}
		private function editParentObjectButton_clickHandler(event:MouseEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_PARENT_MESH_PROPERTIES,  prevSelected.removeItemAt(prevSelected.length-1), true));
		}
		
	]]></fx:Script>
	
	
	<s:Group width="100%" top="0">
		<s:Rect left="0" right="0" top="3" bottom="3">
			<s:fill>
				<s:SolidColor color="0x111111" alpha="0.3"/>
			</s:fill>
		</s:Rect>
		<s:HGroup width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" paddingTop="4" paddingBottom="4">
			<s:Button id="editParentObjectButton" styleName="editParentObjectButtonStyle" visible="{prevSelected.length>0}"
					  width="32" height="32" click="editParentObjectButton_clickHandler(event)"/>
			<s:Label width="100%" text="Light" fontWeight="bold" fontSize="14"/>
		</s:HGroup>
	</s:Group>
	<s:HGroup width="100%" verticalAlign="middle" paddingLeft="6" paddingRight="6" paddingTop="6" paddingBottom="6" horizontalAlign="center">
		<s:RadioButton label="Directional" width="100%" group="{typeRadioGroup}" value="{LightVO.DIRECTIONAL}"/>
		<s:RadioButton label="Point" width="100%" group="{typeRadioGroup}" value="{LightVO.POINT}"/>
	</s:HGroup>
	
	<controls:CollapsiblePanel width="100%" title="General" collapsed="true">
		<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
			
			<s:FormItem label="Name" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:TextInput id="nameInput" width="100%" text="{_asset.name}" change="name_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="X" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="xStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.x}"
								  change="position_commitHandler(event)" />
			</s:FormItem>
			<s:FormItem label="Y" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="yStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.y}"
								  change="position_commitHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Z" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="zStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.z}"
								  change="position_commitHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Light Color" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<mx:ColorPicker id="colorPicker" selectedColor="{_asset.color}" change="colorPicker_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Ambient Color" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<mx:ColorPicker id="ambientColorPicker" selectedColor="{_asset.ambientColor}" change="ambientColorPicker_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Ambient" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="ambientStepper"
								  minimum="0" maximum="100" width="100%" value="{_asset.ambient*100}"
								  change="ambientStepper_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Specular" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="specularStepper"
								  minimum="0" maximum="999" width="100%" value="{_asset.specular}"
								  change="specularStepper_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Diffuse" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="diffuseStepper"
								  minimum="0" maximum="999" width="100%" value="{_asset.diffuse}"
								  change="diffuseStepper_changeHandler(event)"/>
			</s:FormItem>
		</s:Form>
		
	</controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Direction" collapsed="true" includeIn="directionalType">
		<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
			
			<s:FormItem label="X" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="directionxStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.directionX}"
								  change="directionStepper_changeHandler(event)" />
			</s:FormItem>
			<s:FormItem label="Y" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="directionyStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.directionY}"
								  change="directionStepper_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Z" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="directionzStepper"
								  minimum="-999999" maximum="999999" width="100%" value="{_asset.directionZ}"
								  change="directionStepper_changeHandler(event)"/>
			</s:FormItem>
		</s:Form>
		
	</controls:CollapsiblePanel>
	<controls:CollapsiblePanel width="100%" title="Glow" collapsed="true" includeIn="pointType">
		<s:Form width="100%" skinClass="awaybuilder.view.skins.PropertyFormSkin">
			
			<s:FormItem label="Radius" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="radiusStepper"
								  minimum="0" maximum="{99999}" width="100%" value="{_asset.radius}" 
								  change="radiusStepper_changeHandler(event)"/>
			</s:FormItem>
			<s:FormItem label="Fall Off" skinClass="awaybuilder.view.skins.PropertyFormItemSkin" width="100%">
				<s:NumericStepper id="falloffStepper"
								  minimum="0" maximum="999999" width="100%" value="{_asset.fallOff}"
								  change="falloffStepper_changeHandler(event)"/>
			</s:FormItem>
		</s:Form>
		
	</controls:CollapsiblePanel>
	
</editors:EditorBase>
