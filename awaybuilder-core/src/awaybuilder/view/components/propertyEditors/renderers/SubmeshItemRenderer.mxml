<?xml version="1.0"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
                autoDrawBackground="false" xmlns:controls="awaybuilder.view.components.controls.*">

    <s:layout>
        <s:HorizontalLayout verticalAlign="middle"/>
    </s:layout>
    <fx:Script><![CDATA[
		import away3d.core.base.SubMesh;
		
		import awaybuilder.model.vo.MaterialVO;
		import awaybuilder.model.vo.SubMeshVO;
		import awaybuilder.view.components.controls.events.ExtendedDropDownEvent;
		import awaybuilder.view.components.propertyEditors.PropertyEditorEvent;
		
		import mx.controls.Alert;
		
		import spark.events.IndexChangeEvent;

        [Bindable]
        private var _subMesh:SubMeshVO;

        [Bindable]
        private var _selectedMaterial:MaterialVO;

        override public function set data(value:Object):void 
		{
            super.data = value;
            _subMesh = value as SubMeshVO;
			if( !_subMesh.material )
			{
				trace( SubMesh(_subMesh.linkedObject).sourceEntity.name );
				Alert.show( "material is lost" );
				return;
			}
            for each(var material:MaterialVO in _subMesh.linkedMaterials) 
			{
                if (material.linkedObject == _subMesh.material.linkedObject) 
				{
                    _selectedMaterial = material;
                }
            }
        }

        private function dropDownList1_changeHandler(event:IndexChangeEvent):void 
		{
            var newValue:SubMeshVO = new SubMeshVO(_subMesh.linkedObject as SubMesh);
            newValue.material = dropDownList.selectedItem as MaterialVO;
            dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_SUBMESH_CHANGE, newValue, true));
        }

        private function editSubmeshMaterialButton_clickHandler(event:MouseEvent):void
        {
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.SHOW_MATERIAL_PROPERTIES, _subMesh.material, true));
        }
		
		protected function dropDownList_addNewItemHandler(event:ExtendedDropDownEvent):void
		{
			dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.MESH_SUBMESH_ADD_NEW_MATERIAL, _subMesh, true));
		}
		
		private function dropDownIconFunction(item:MaterialVO):Object 
		{
			if( item.type == MaterialVO.TEXTURE )
			{
				return item.texture.bitmapData;
			}
			return new BitmapData(32, 32, false, 0x0);
		}
		
	]]></fx:Script>

    <controls:ExtendedDropDownList id="dropDownList" width="100%" skinClass="awaybuilder.view.skins.ExtendedDropDownListSkin"
                    dataProvider="{_subMesh.linkedMaterials}" selectedItem="{_selectedMaterial}"
                    change="dropDownList1_changeHandler(event)"
					iconFunction="{dropDownIconFunction}"
					labelField="name"
					newItemLabel="Add New Material"
					height="40"
					addNewItem="dropDownList_addNewItemHandler(event)"/>
    <s:Button id="editSubmeshMaterialButton" styleName="editSharedObjectButtonStyle"
              width="23" height="100%" click="editSubmeshMaterialButton_clickHandler(event)"/>
</s:ItemRenderer>
